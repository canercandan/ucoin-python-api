stages:
  - format
  - test
  - build
  - release
  - publish_doc

variables:
  DOCKER_IMAGE: "registry.duniter.org/docker/python3/poetry"
  PYTHON_VERSION: "3.5"

image: $DOCKER_IMAGE/$PYTHON_VERSION:latest

# SUB-TASKS
.push_to_github:
  tags:
    - github
  after_script:
    # remove all files in current repo
    - rm -rf ./*
    - rm -rf .git*
    # do a mirror clone in current repo
    - git clone --mirror $CI_REPOSITORY_URL .
    # do config for github push
    - git remote add github $GITHUB_URL_AND_KEY
    - git config --global user.email "contact@duniter.org"
    - git config --global user.name "Duniter"
    # remove refs about merge requests
    - bash -c "cat packed-refs | grep -v 'refs/merge-requests' > packed-refs-new; echo 'Removed merge-requests refs.'"
    - mv packed-refs-new packed-refs
    # github push
    - bash -c "git push --force --mirror github 2>&1 | grep -v duniter-gitlab; echo $?"

.changes:
  only:
    changes:
      - duniterpy/**/*.py
      - .gitlab-ci.yml
      - Makefile
      - tests/**/*.py
      - pyproject.toml

# TASKS
format:
  extends:
    - .changes
  stage: format
  image: $DOCKER_IMAGE/3.8:latest
  script:
    - pip install -r requirements_dev.txt
    - make check-format

test:
  extends:
    - .changes
  stage: test
  script:
    - pip install -r requirements.txt
    - make tests

check:
  extends:
    - .changes
  stage: test
  script:
    - pip install -r requirements_dev.txt
    - make mypy
    - make pylint

build:
  extends:
    - .changes
  stage: build
  script:
    - pip install -r requirements_deploy.txt
    - make build

release:
  extends:
    - .push_to_github
  stage: release
  when: manual
  script:
    - pip install -r requirements_deploy.txt
    - make build
    - make deploy PYPI_LOGIN=${PYPI_LOGIN} PYPI_PASSWORD=${PYPI_PASSWORD}
  only:
    - tags
    - master

release_test:
  stage: release
  when: manual
  script:
    - pip install -r requirements_deploy.txt
    - make build
    - make deploy_test PYPI_TEST_LOGIN=${PYPI_TEST_LOGIN} PYPI_TEST_PASSWORD=${PYPI_TEST_PASSWORD}

pages:
  stage: publish_doc
  when: manual
  only:
    - tags
    - master
  script:
    - pip install -r requirements_dev.txt
    - make docs
    - mv docs/_build/html public
    - ls public
  artifacts:
    untracked: true
    paths:
      - public
